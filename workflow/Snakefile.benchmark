container: "library://tt104/default/scmixture:0.1"
configfile: "config/config.yaml"

# Snakemake runs the first rule so create a pseudo-rule to define the target outputs
rule All:
	input:
		["results/benchmarking/"+d+"."+m+".ari.pdf" for m in config["models"] for d in config["datasets"]]
# Snakemake rules

rule Scales:
	input: 
		gene_counts = "data/{data}.csv"
	output: 
		scales_data = "results/{data}.scales.csv"
	script: "scripts/scales.R"

rule Hyperparameters:
	input: 
		rules.Scales.input.gene_counts,
		rules.Scales.output.scales_data
	output: 
		params = "results/{data}.hyperparameters.csv"
	script: "scripts/hyperparameters.R"

rule Clustering:
	input:
		rules.Scales.input.gene_counts,
		rules.Scales.output.scales_data,
		rules.Hyperparameters.output.params,
		conf = "resources/conf/"
	params:
		model = "{model}"
	output: 
		clusters_raw = "results/raw/{data}.{model}.clusters.csv"
	script: "scripts/scmix.jl"

rule Postprocessing:
	input: 
		rules.Clustering.output.clusters_raw,
	output: 
		clusters = "results/{data}.{model}.clusters.csv"
	script: "scripts/postBench.R"

rule Benchmarking:
	input: 
		"data/{data}.labels.csv"
		rules.Postprocessing.output.clusters,
	output:
		ari = ["results/benchmarking/{data}.{model}.ari."+str(i)+".csv" for i in range(config["benchRuns"])]
	script: "scripts/benchmark.R"

rule BenchmarkingPlots:
	input: 
		rules.Postprocessing.output.clusters
		rules.Benchmarking.output.ari
	output:
		ari = "results/benchmarking/{data}.{model}.ari.pdf"
	script: "scripts/benchPlots.R"
